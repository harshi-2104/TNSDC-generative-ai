# -*- coding: utf-8 -*-
"""hepatitis_patient_category_predicition_using_ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h5wbq7EpS3AwAH39qY9D54c9aFYhnP0w
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
plt.style.use('fivethirtyeight')
from imblearn.over_sampling import SMOTE

from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report,confusion_matrix

from tensorflow import keras
# %matplotlib inline

df = pd.read_csv('/content/HepatitisCdata.csv')
df.shape

df.info()

df.isna().sum()

df.head()

df.drop('Unnamed: 0',axis=1,inplace=True)

df.describe()

df.fillna(df.mean(),inplace=True)
df.describe()

plt.figure(figsize=(7,7))
plt.title('Age Histogram')
sns.histplot(df['Age'])
plt.show()

plt.figure(figsize=(7,7))
plt.title('Age Histogram with Category')
sns.histplot(df[['Age','Category']],x='Age',hue='Category')
plt.show()

plt.figure(figsize=(7,7))
sns.pairplot(data=df.drop(['Age','Sex'],axis=1),hue='Category')
plt.title('Pairplot')
plt.show()

plt.figure(figsize=(7,7))
df['Category'].value_counts().plot(kind='pie',autopct='%.2f')
plt.title('Category Pie Chart')
plt.show()

df['Category'].value_counts()

df.Category.unique()

replace_dict = dict()
num_dict = dict()
i=0
for val in df['Category'].unique():
    replace_dict[val] = i
    num_dict[str(i)] = val
    i += 1

df['Category'].replace(replace_dict,inplace=True)
df.Category.unique()

df['Sex'].value_counts()

df['Sex'].replace(['m','f'],[1,0],inplace=True)
df['Sex'].value_counts()

x,y = df.drop('Category',axis=1),df['Category']

smote = SMOTE()
x,y = smote.fit_resample(x,y)

plt.figure(figsize=(7,7))
y.value_counts().plot(kind='pie',autopct='%.2f')
plt.title('Category Pie Chart')
plt.show()
y.value_counts()

cols_to_scale = x.drop('Sex',axis=1).columns
cols_to_scale

scale = MinMaxScaler()
scalled = scale.fit_transform(x[cols_to_scale])

i = 0
for col in cols_to_scale:
    x[col] = scalled[:,i]
    i += 1

x.head()

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.3)
x_train.shape, x_test.shape, y_train.shape, y_test.shape

model = keras.Sequential([
    keras.layers.Dense(12,input_shape=(12,),activation='relu'),
    keras.layers.Dense(5,activation='softmax')
])

model.compile(
    optimizer='adam',
    metrics=['accuracy'],
    loss='sparse_categorical_crossentropy'
)

model.fit(x_train,y_train,epochs=200)

model.evaluate(x_test,y_test)

def predict(model,x):
    pred = model.predict(x)
    pred_test = np.array([np.argmax(pred[i]) for i in range(len(pred))])
    return pred_test

def plot_actual_vs_predicted(y_true,y_pred,title):
    cm = confusion_matrix(y_true,y_pred)
    plt.figure(figsize=(7,7))
    sns.heatmap(cm,annot=True,fmt='g',
                xticklabels=num_dict.values(),yticklabels=num_dict.values())
    plt.title(title)
    plt.show()
    print("Classification Report")
    print(classification_report(y_true,y_pred))

y_test_pred = predict(model,x_test)
plot_actual_vs_predicted(y_test,y_test_pred,"Test Data Predictions")

y_train_pred = predict(model,x_train)
plot_actual_vs_predicted(y_train,y_train_pred,"Train Data Predictions")

